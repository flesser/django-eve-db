# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import caching.base


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AgtAgent',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('level', models.IntegerField(null=True, blank=True)),
                ('quality', models.IntegerField(null=True, blank=True)),
                ('locator', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Agent',
                'verbose_name_plural': 'Agents',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AgtAgentType',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Agent Type',
                'verbose_name_plural': 'Agent Types',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AgtResearchAgent',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('agent', models.ForeignKey(to='eve_db.AgtAgent')),
            ],
            options={
                'ordering': ['agent'],
                'verbose_name': 'Research Agent',
                'verbose_name_plural': 'Research Agents',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ChrAncestry',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('description', models.TextField(blank=True)),
                ('perception_bonus', models.IntegerField(default=0)),
                ('willpower_bonus', models.IntegerField(default=0)),
                ('charisma_bonus', models.IntegerField(default=0)),
                ('memory_bonus', models.IntegerField(default=0)),
                ('intelligence_bonus', models.IntegerField(default=0)),
                ('icon_id', models.IntegerField(null=True, blank=True)),
                ('short_description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Ancestry',
                'verbose_name_plural': 'Ancestries',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ChrAttribute',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('description', models.TextField(blank=True)),
                ('short_description', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('icon_id', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Character Attribute',
                'verbose_name_plural': 'Character Attributes',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ChrBloodline',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('description', models.TextField(blank=True)),
                ('male_description', models.TextField(blank=True)),
                ('female_description', models.TextField(blank=True)),
                ('starting_perception', models.IntegerField(default=0)),
                ('starting_willpower', models.IntegerField(default=0)),
                ('starting_charisma', models.IntegerField(default=0)),
                ('starting_memory', models.IntegerField(default=0)),
                ('starting_intelligence', models.IntegerField(default=0)),
                ('icon_id', models.IntegerField(null=True, blank=True)),
                ('short_description', models.TextField(blank=True)),
                ('short_male_description', models.TextField(blank=True)),
                ('short_female_description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Bloodline',
                'verbose_name_plural': 'Bloodlines',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ChrFaction',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('description', models.TextField(blank=True)),
                ('size_factor', models.FloatField(null=True, blank=True)),
                ('station_count', models.IntegerField(default=0)),
                ('station_system_count', models.IntegerField(default=0)),
                ('icon_id', models.IntegerField(null=True, blank=True)),
                ('races', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Faction',
                'verbose_name_plural': 'Factions',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ChrRace',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=30)),
                ('short_description', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('icon_id', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Race',
                'verbose_name_plural': 'Races',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CrpActivity',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Corporate Activity',
                'verbose_name_plural': 'Corporate Activities',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CrpNPCCorporation',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('description', models.TextField(blank=True)),
                ('size', models.CharField(blank=True, max_length=1, choices=[(b'H', b'Huge'), (b'L', b'Large'), (b'M', b'Medium'), (b'S', b'Small'), (b'T', b'Tiny')])),
                ('extent', models.CharField(blank=True, max_length=1, choices=[(b'G', b'Global'), (b'N', b'National'), (b'R', b'Regional'), (b'C', b'Constellational'), (b'L', b'Local')])),
                ('investor1_shares', models.IntegerField(null=True, blank=True)),
                ('investor2_shares', models.IntegerField(null=True, blank=True)),
                ('investor3_shares', models.IntegerField(null=True, blank=True)),
                ('investor4_shares', models.IntegerField(null=True, blank=True)),
                ('public_share_percent', models.FloatField(null=True, blank=True)),
                ('initial_share_price', models.IntegerField(null=True, blank=True)),
                ('min_security', models.FloatField(null=True, blank=True)),
                ('stations_are_scattered', models.BooleanField(default=False)),
                ('fringe_systems', models.IntegerField(default=0)),
                ('corridor_systems', models.IntegerField(default=0)),
                ('hub_systems', models.IntegerField(default=0)),
                ('border_systems', models.IntegerField(default=0)),
                ('size_factor', models.FloatField(null=True, blank=True)),
                ('station_count', models.IntegerField(default=0, null=True, blank=True)),
                ('station_system_count', models.IntegerField(default=0, null=True, blank=True)),
                ('icon_id', models.IntegerField(null=True, blank=True)),
                ('enemy_corp', models.ForeignKey(related_name=b'enemy_of_set', blank=True, to='eve_db.CrpNPCCorporation', null=True)),
                ('faction', models.ForeignKey(blank=True, to='eve_db.ChrFaction', null=True)),
                ('friendly_corp', models.ForeignKey(related_name=b'friendly_with_set', blank=True, to='eve_db.CrpNPCCorporation', null=True)),
                ('investor1', models.ForeignKey(related_name=b'invested1_set', blank=True, to='eve_db.CrpNPCCorporation', null=True)),
                ('investor2', models.ForeignKey(related_name=b'invested2_set', blank=True, to='eve_db.CrpNPCCorporation', null=True)),
                ('investor3', models.ForeignKey(related_name=b'invested3_set', blank=True, to='eve_db.CrpNPCCorporation', null=True)),
                ('investor4', models.ForeignKey(related_name=b'invested4_set', blank=True, to='eve_db.CrpNPCCorporation', null=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'NPC Corporation',
                'verbose_name_plural': 'NPC Corporations',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CrpNPCCorporationDivision',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('size', models.IntegerField(null=True, blank=True)),
                ('corporation', models.ForeignKey(to='eve_db.CrpNPCCorporation')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'NPC Corporation Division',
                'verbose_name_plural': 'NPC Corporation Divisions',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CrpNPCCorporationResearchField',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('corporation', models.ForeignKey(to='eve_db.CrpNPCCorporation')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'NPC Corporation Research Field',
                'verbose_name_plural': 'NPC Corporation Research Fields',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CrpNPCCorporationTrade',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('corporation', models.ForeignKey(to='eve_db.CrpNPCCorporation')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'NPC Corporation Trade',
                'verbose_name_plural': 'NPC Corporation Trades',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CrpNPCDivision',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=100, blank=True)),
                ('description', models.TextField(blank=True)),
                ('leader_type', models.CharField(max_length=100, blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'NPC Division',
                'verbose_name_plural': 'NPC Divisions',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DgmAttributeCategory',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=255, blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Inventory Attribute Category',
                'verbose_name_plural': 'Inventory Attribute Categories',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DgmAttributeType',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=75)),
                ('description', models.TextField(blank=True)),
                ('icon_id', models.IntegerField(null=True, blank=True)),
                ('default_value', models.IntegerField(null=True, blank=True)),
                ('is_published', models.BooleanField(default=False)),
                ('display_name', models.CharField(max_length=100, blank=True)),
                ('is_stackable', models.BooleanField(default=False)),
                ('high_is_good', models.BooleanField(default=True)),
                ('category', models.ForeignKey(blank=True, to='eve_db.DgmAttributeCategory', null=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Inventory Attribute Type',
                'verbose_name_plural': 'Inventory Attribute Types',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DgmEffect',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=150)),
                ('category', models.IntegerField(null=True, blank=True)),
                ('pre_expression', models.IntegerField(null=True, blank=True)),
                ('post_expression', models.IntegerField(null=True, blank=True)),
                ('description', models.TextField(blank=True)),
                ('guid', models.CharField(max_length=255, blank=True)),
                ('icon_id', models.IntegerField(null=True, blank=True)),
                ('is_offensive', models.BooleanField(default=False)),
                ('is_assistance', models.BooleanField(default=False)),
                ('disallow_auto_repeat', models.BooleanField(default=False)),
                ('is_published', models.BooleanField(default=False)),
                ('display_name', models.CharField(max_length=255, blank=True)),
                ('is_warp_safe', models.BooleanField(default=False)),
                ('has_range_chance', models.BooleanField(default=False)),
                ('has_electronic_chance', models.BooleanField(default=False)),
                ('has_propulsion_chance', models.BooleanField(default=False)),
                ('distribution', models.IntegerField(null=True, blank=True)),
                ('sfx_name', models.CharField(max_length=100, blank=True)),
                ('discharge_attribute', models.ForeignKey(related_name=b'inventoryeffectdischargeattribute', blank=True, to='eve_db.DgmAttributeType', null=True)),
                ('duration_attribute', models.ForeignKey(related_name=b'inventoryeffectdurationeattribute', blank=True, to='eve_db.DgmAttributeType', null=True)),
                ('falloff_attribute', models.ForeignKey(related_name=b'inventoryeffectfalloffattribute', blank=True, to='eve_db.DgmAttributeType', null=True)),
                ('fitting_usage_chance_attribute', models.ForeignKey(related_name=b'inventoryeffectfittingusagechanceattribute', blank=True, to='eve_db.DgmAttributeType', null=True)),
                ('npc_activation_chance_attribute', models.ForeignKey(related_name=b'inventoryeffectnpcactivationchanceattribute', blank=True, to='eve_db.DgmAttributeType', null=True)),
                ('npc_usage_chance_attribute', models.ForeignKey(related_name=b'inventoryeffectnpcusagechanceattribute', blank=True, to='eve_db.DgmAttributeType', null=True)),
                ('range_attribute', models.ForeignKey(related_name=b'inventoryeffectrangeattribute', blank=True, to='eve_db.DgmAttributeType', null=True)),
                ('tracking_speed_attribute', models.ForeignKey(related_name=b'inventoryeffecttrackingspeedattribute', blank=True, to='eve_db.DgmAttributeType', null=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Inventory Effect',
                'verbose_name_plural': 'Inventory Effects',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DgmTypeAttribute',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value_int', models.IntegerField(null=True, blank=True)),
                ('value_float', models.FloatField(null=True, blank=True)),
                ('attribute', models.ForeignKey(to='eve_db.DgmAttributeType')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Inventory Type Attribute',
                'verbose_name_plural': 'Inventory Type Attributes',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DgmTypeEffect',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('is_default', models.BooleanField(default=False)),
                ('effect', models.ForeignKey(to='eve_db.DgmEffect')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Inventory Type Effect',
                'verbose_name_plural': 'Inventory Type Effect',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EveUnit',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=75)),
                ('display_name', models.CharField(max_length=30, blank=True)),
                ('description', models.CharField(max_length=100, blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Unit',
                'verbose_name_plural': 'Units',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InvCategory',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=255)),
                ('is_published', models.BooleanField(default=True)),
                ('icon_id', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Inventory Category',
                'verbose_name_plural': 'Inventory Categories',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InvContrabandType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('standing_loss', models.FloatField(null=True, blank=True)),
                ('confiscate_min_sec', models.FloatField(null=True, blank=True)),
                ('fine_by_value', models.FloatField(null=True, blank=True)),
                ('attack_min_sec', models.FloatField(null=True, blank=True)),
                ('faction', models.ForeignKey(to='eve_db.ChrFaction')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Contraband',
                'verbose_name_plural': 'Contraband',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InvFlag',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('text', models.CharField(max_length=255, blank=True)),
                ('order', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Inventory Flag',
                'verbose_name_plural': 'Inventory Flags',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InvGroup',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=150)),
                ('description', models.TextField()),
                ('icon_id', models.IntegerField(null=True, blank=True)),
                ('use_base_price', models.BooleanField(default=False)),
                ('allow_manufacture', models.BooleanField(default=True)),
                ('allow_recycle', models.BooleanField(default=True)),
                ('allow_anchoring', models.BooleanField(default=False)),
                ('is_anchored', models.BooleanField(default=False)),
                ('is_fittable_non_singleton', models.BooleanField(default=False)),
                ('is_published', models.BooleanField(default=False)),
                ('category', models.ForeignKey(blank=True, to='eve_db.InvCategory', null=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Inventory Group',
                'verbose_name_plural': 'Inventory Groups',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InvItem',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('owner', models.IntegerField(null=True)),
                ('location', models.IntegerField(null=True)),
                ('quantity', models.IntegerField()),
                ('flag', models.ForeignKey(to='eve_db.InvFlag')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Item',
                'verbose_name_plural': 'Items',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InvMarketGroup',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=300012, null=True, blank=True)),
                ('has_items', models.BooleanField(default=True)),
                ('icon_id', models.IntegerField(null=True, blank=True)),
                ('parent', models.ForeignKey(blank=True, to='eve_db.InvMarketGroup', null=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Market Group',
                'verbose_name_plural': 'Market Groups',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InvMetaGroup',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('icon_id', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Inventory Meta Group',
                'verbose_name_plural': 'Inventory Meta Groups',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InvName',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255, blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Name',
                'verbose_name_plural': 'Names',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InvPosition',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('x', models.FloatField(null=True)),
                ('y', models.FloatField(null=True)),
                ('z', models.FloatField(null=True)),
                ('yaw', models.FloatField(null=True)),
                ('pitch', models.FloatField(null=True)),
                ('roll', models.FloatField(null=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Position',
                'verbose_name_plural': 'Positions',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InvPOSResource',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('quantity', models.IntegerField(null=True, blank=True)),
                ('min_security_level', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'POS Resource',
                'verbose_name_plural': 'POS Resources',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InvPOSResourcePurpose',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('purpose', models.CharField(max_length=75, blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'POS Resource Purpose',
                'verbose_name_plural': 'POS Resource Purposes',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InvType',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=100, blank=True)),
                ('description', models.TextField(blank=True)),
                ('mass', models.FloatField(null=True, blank=True)),
                ('volume', models.FloatField(null=True, blank=True)),
                ('capacity', models.FloatField(null=True, blank=True)),
                ('portion_size', models.IntegerField(null=True, blank=True)),
                ('base_price', models.FloatField(null=True, blank=True)),
                ('is_published', models.BooleanField(default=False)),
                ('chance_of_duplicating', models.FloatField(null=True, blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Inventory Type',
                'verbose_name_plural': 'Inventory Types',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InvMetaType',
            fields=[
                ('type', models.ForeignKey(related_name=b'inventorymetatype_type_set', primary_key=True, serialize=False, to='eve_db.InvType', unique=True)),
                ('meta_group', models.ForeignKey(to='eve_db.InvMetaGroup')),
            ],
            options={
                'ordering': ['type'],
                'verbose_name': 'Inventory Meta Type',
                'verbose_name_plural': 'Inventory Meta Types',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InvTypeMaterial',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('quantity', models.IntegerField(default=0)),
                ('material_type', models.ForeignKey(related_name=b'itemtype_set', to='eve_db.InvType')),
                ('type', models.ForeignKey(related_name=b'material_set', to='eve_db.InvType')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Inventory Type Material',
                'verbose_name_plural': 'Inventory Type Materials',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InvTypeReaction',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('input', models.IntegerField(blank=True, null=True, choices=[(0, b'Result of reaction'), (1, b'Reaction material')])),
                ('quantity', models.IntegerField(null=True, blank=True)),
                ('reaction_type', models.ForeignKey(related_name=b'inventorytypereactions_reaction_type_set', to='eve_db.InvType')),
                ('type', models.ForeignKey(related_name=b'inventorytypereactions_type_set', to='eve_db.InvType', help_text=b'Reaction result or material.')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Inventory Type Reaction',
                'verbose_name_plural': 'Inventory Type Reactions',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InvUniqueName',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=100)),
                ('group', models.ForeignKey(to='eve_db.InvGroup')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Position',
                'verbose_name_plural': 'Positions',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MapConstellation',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('x_min', models.FloatField(null=True, blank=True)),
                ('x_max', models.FloatField(null=True, blank=True)),
                ('y', models.FloatField(null=True, blank=True)),
                ('y_min', models.FloatField(null=True, blank=True)),
                ('y_max', models.FloatField(null=True, blank=True)),
                ('z', models.FloatField(null=True, blank=True)),
                ('z_min', models.FloatField(null=True, blank=True)),
                ('z_max', models.FloatField(null=True, blank=True)),
                ('x', models.FloatField(null=True, blank=True)),
                ('radius', models.FloatField(null=True, blank=True)),
                ('sovereignty_start_time', models.DateTimeField(null=True, blank=True)),
                ('sovereignty_grace_start_time', models.DateTimeField(null=True, blank=True)),
                ('faction', models.ForeignKey(blank=True, to='eve_db.ChrFaction', null=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Constellation',
                'verbose_name_plural': 'Constellations',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MapConstellationJump',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('from_constellation', models.ForeignKey(related_name=b'constellation_jumps_from_constellation_set', to='eve_db.MapConstellation')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Constellation Jump',
                'verbose_name_plural': 'Constellation Jumps',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MapDenormalize',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('orbit_id', models.IntegerField(null=True, blank=True)),
                ('x', models.FloatField(null=True, blank=True)),
                ('y', models.FloatField(null=True, blank=True)),
                ('z', models.FloatField(null=True, blank=True)),
                ('radius', models.FloatField(null=True, blank=True)),
                ('name', models.CharField(max_length=100, null=True, blank=True)),
                ('security', models.FloatField(null=True, blank=True)),
                ('celestial_index', models.IntegerField(null=True, blank=True)),
                ('orbit_index', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Denormalize',
                'verbose_name_plural': 'Denormalizations',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MapCelestialStatistic',
            fields=[
                ('celestial', models.ForeignKey(primary_key=True, serialize=False, to='eve_db.MapDenormalize', unique=True)),
                ('temperature', models.FloatField(null=True, blank=True)),
                ('spectral_class', models.CharField(max_length=255, blank=True)),
                ('luminosity', models.FloatField(null=True, blank=True)),
                ('age', models.FloatField(null=True, blank=True)),
                ('life', models.FloatField(null=True, blank=True)),
                ('orbit_radius', models.FloatField(null=True, blank=True)),
                ('eccentricity', models.FloatField(null=True, blank=True)),
                ('mass_dust', models.FloatField(null=True, blank=True)),
                ('mass_gas', models.FloatField(null=True, blank=True)),
                ('is_fragmented', models.BooleanField(default=False)),
                ('density', models.FloatField(null=True, blank=True)),
                ('surface_gravity', models.FloatField(null=True, blank=True)),
                ('escape_velocity', models.FloatField(null=True, blank=True)),
                ('orbit_period', models.FloatField(null=True, blank=True)),
                ('rotation_rate', models.FloatField(null=True, blank=True)),
                ('is_locked', models.BooleanField(default=False)),
                ('pressure', models.FloatField(null=True, blank=True)),
                ('radius', models.FloatField(null=True, blank=True)),
                ('mass', models.FloatField(null=True, blank=True)),
            ],
            options={
                'ordering': ['celestial'],
                'verbose_name': 'Celestial Statistic',
                'verbose_name_plural': 'Celestial Statistics',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MapJump',
            fields=[
                ('origin_gate', models.ForeignKey(related_name=b'stargate_jump_origin_set', primary_key=True, serialize=False, to='eve_db.MapDenormalize', unique=True)),
            ],
            options={
                'ordering': ['origin_gate'],
                'verbose_name': 'Stargate Jump',
                'verbose_name_plural': 'Stargate Jumps',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MapLandmark',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('description', models.TextField(blank=True)),
                ('x', models.FloatField(null=True, blank=True)),
                ('y', models.FloatField(null=True, blank=True)),
                ('z', models.FloatField(null=True, blank=True)),
                ('icon_id', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Landmark',
                'verbose_name_plural': 'Landmarks',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MapLocationScene',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('graphic', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Location Scene',
                'verbose_name_plural': 'Location Scenes',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MapLocationWormholeClass',
            fields=[
                ('location', models.ForeignKey(primary_key=True, serialize=False, to='eve_db.MapDenormalize', unique=True)),
                ('wormhole_class', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['location'],
                'verbose_name': 'Wormhole Class',
                'verbose_name_plural': 'Wormhole Classes',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MapRegion',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('x_min', models.FloatField(null=True, blank=True)),
                ('x_max', models.FloatField(null=True, blank=True)),
                ('y', models.FloatField(null=True, blank=True)),
                ('y_min', models.FloatField(null=True, blank=True)),
                ('y_max', models.FloatField(null=True, blank=True)),
                ('z', models.FloatField(null=True, blank=True)),
                ('z_min', models.FloatField(null=True, blank=True)),
                ('z_max', models.FloatField(null=True, blank=True)),
                ('x', models.FloatField(null=True, blank=True)),
                ('radius', models.FloatField(null=True, blank=True)),
                ('faction', models.ForeignKey(blank=True, to='eve_db.ChrFaction', null=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Region',
                'verbose_name_plural': 'Regions',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MapRegionJump',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('from_region', models.ForeignKey(related_name=b'region_jumps_from_region_set', to='eve_db.MapRegion')),
                ('to_region', models.ForeignKey(related_name=b'region_jumps_to_region_set', to='eve_db.MapRegion')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Region Jump',
                'verbose_name_plural': 'Region Jumps',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MapSolarSystem',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255, null=True, blank=True)),
                ('x', models.FloatField(null=True, blank=True)),
                ('x_min', models.FloatField(null=True, blank=True)),
                ('x_max', models.FloatField(null=True, blank=True)),
                ('y', models.FloatField(null=True, blank=True)),
                ('y_min', models.FloatField(null=True, blank=True)),
                ('y_max', models.FloatField(null=True, blank=True)),
                ('z', models.FloatField(null=True, blank=True)),
                ('z_min', models.FloatField(null=True, blank=True)),
                ('z_max', models.FloatField(null=True, blank=True)),
                ('luminosity', models.FloatField(null=True, blank=True)),
                ('is_border_system', models.BooleanField(default=False)),
                ('is_fringe_system', models.BooleanField(default=False)),
                ('is_corridor_system', models.BooleanField(default=False)),
                ('is_hub_system', models.BooleanField(default=False)),
                ('is_international', models.BooleanField(default=False)),
                ('has_interregional_link', models.BooleanField(default=False)),
                ('has_interconstellational_link', models.BooleanField(default=False)),
                ('security_level', models.FloatField(null=True, blank=True)),
                ('radius', models.FloatField(null=True, blank=True)),
                ('security_class', models.CharField(max_length=5, blank=True)),
                ('sovereignty_level', models.IntegerField(null=True, blank=True)),
                ('sovereignty_start_time', models.DateTimeField(null=True, blank=True)),
                ('constellation', models.ForeignKey(blank=True, to='eve_db.MapConstellation', null=True)),
                ('faction', models.ForeignKey(related_name=b'solarsystem_set', blank=True, to='eve_db.ChrFaction', null=True)),
                ('region', models.ForeignKey(blank=True, to='eve_db.MapRegion', null=True)),
                ('sun_type', models.ForeignKey(blank=True, to='eve_db.InvType', null=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Solar System',
                'verbose_name_plural': 'Solar Systems',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MapSolarSystemJump',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('from_constellation', models.ForeignKey(related_name=b'solar_system_jumps_from_constellation_set', blank=True, to='eve_db.MapConstellation', null=True)),
                ('from_region', models.ForeignKey(related_name=b'solar_system_jumps_from_region_set', blank=True, to='eve_db.MapRegion', null=True)),
                ('from_solar_system', models.ForeignKey(related_name=b'solar_system_jumps_from_solar_system_set', to='eve_db.MapSolarSystem')),
                ('to_constellation', models.ForeignKey(related_name=b'solar_system_jumps_to_constellation_set', blank=True, to='eve_db.MapConstellation', null=True)),
                ('to_region', models.ForeignKey(related_name=b'solar_system_jumps_to_region_set', blank=True, to='eve_db.MapRegion', null=True)),
                ('to_solar_system', models.ForeignKey(related_name=b'solar_system_jumps_to_solar_system_set', to='eve_db.MapSolarSystem')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Solar System Jump',
                'verbose_name_plural': 'Solar System Jumps',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MapUniverse',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('x_min', models.FloatField(null=True, blank=True)),
                ('x_max', models.FloatField(null=True, blank=True)),
                ('y', models.FloatField(null=True, blank=True)),
                ('y_min', models.FloatField(null=True, blank=True)),
                ('y_max', models.FloatField(null=True, blank=True)),
                ('z', models.FloatField(null=True, blank=True)),
                ('z_min', models.FloatField(null=True, blank=True)),
                ('z_max', models.FloatField(null=True, blank=True)),
                ('x', models.FloatField(null=True, blank=True)),
                ('radius', models.FloatField(null=True, blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Universe',
                'verbose_name_plural': 'Universes',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PlanetSchematic',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255, null=True, blank=True)),
                ('cycle_time', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Planet Schematic',
                'verbose_name_plural': 'Planet Schematics',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PlanetSchematicsPinMap',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('schematic', models.ForeignKey(to='eve_db.PlanetSchematic')),
                ('type', models.ForeignKey(to='eve_db.InvType')),
            ],
            options={
                'ordering': ['schematic', 'type'],
                'verbose_name': 'Planet Schematic Pin Map',
                'verbose_name_plural': 'Planet Schematic Pin Maps',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PlanetSchematicsTypeMap',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('quantity', models.IntegerField(null=True, blank=True)),
                ('is_input', models.BooleanField()),
                ('schematic', models.ForeignKey(to='eve_db.PlanetSchematic')),
                ('type', models.ForeignKey(to='eve_db.InvType')),
            ],
            options={
                'ordering': ['schematic', 'is_input', 'type'],
                'verbose_name': 'Planet Schematic Type Map',
                'verbose_name_plural': 'Planet Schematic Type Maps',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RamActivity',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=75, blank=True)),
                ('description', models.CharField(max_length=100, blank=True)),
                ('icon_filename', models.CharField(max_length=50, null=True, blank=True)),
                ('is_published', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Research and Mfg activity',
                'verbose_name_plural': 'Research and Mfg activities',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RamAssemblyLineStations',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('quantity', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Assembly Line Station',
                'verbose_name_plural': 'Assembly Line Stations',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RamAssemblyLineType',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=100, blank=True)),
                ('description', models.TextField(blank=True)),
                ('base_time_multiplier', models.FloatField(null=True, blank=True)),
                ('base_cost_multiplier', models.FloatField(null=True, blank=True)),
                ('base_material_multiplier', models.FloatField(null=True, blank=True)),
                ('volume', models.FloatField(null=True, blank=True)),
                ('min_cost_per_hour', models.FloatField(null=True, blank=True)),
                ('activity', models.ForeignKey(blank=True, to='eve_db.RamActivity', null=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Assembly Line Type',
                'verbose_name_plural': 'Assembly Line Types',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RamAssemblyLineTypeDetailPerCategory',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('time_multiplier', models.FloatField(null=True, blank=True)),
                ('cost_multiplier', models.FloatField(null=True, blank=True)),
                ('material_multiplier', models.FloatField(null=True, blank=True)),
                ('assembly_line_type', models.ForeignKey(to='eve_db.RamAssemblyLineType')),
                ('category', models.ForeignKey(to='eve_db.InvCategory')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Assembly Line Detail per Category',
                'verbose_name_plural': 'Assembly Line Details per Category',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RamAssemblyLineTypeDetailPerGroup',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('time_multiplier', models.FloatField(null=True, blank=True)),
                ('cost_multiplier', models.FloatField(null=True, blank=True)),
                ('material_multiplier', models.FloatField(null=True, blank=True)),
                ('assembly_line_type', models.ForeignKey(to='eve_db.RamAssemblyLineType')),
                ('group', models.ForeignKey(to='eve_db.InvGroup')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Assembly Line Detail per Group',
                'verbose_name_plural': 'Assembly Line Details per Group',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RamInstallationTypeContent',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('quantity', models.IntegerField(null=True)),
                ('assembly_line_type', models.ForeignKey(to='eve_db.RamAssemblyLineType')),
                ('installation_type', models.ForeignKey(to='eve_db.InvType')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Installation Type',
                'verbose_name_plural': 'Installation Types',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StaOperation',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('activity_id', models.IntegerField(null=True, blank=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('description', models.TextField(blank=True)),
                ('fringe', models.IntegerField(null=True, blank=True)),
                ('corridor', models.IntegerField(null=True, blank=True)),
                ('hub', models.IntegerField(null=True, blank=True)),
                ('border', models.IntegerField(null=True, blank=True)),
                ('ratio', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Station Operation',
                'verbose_name_plural': 'Station Operations',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StaOperationServices',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('operation', models.ForeignKey(to='eve_db.StaOperation')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Station Operation Service',
                'verbose_name_plural': 'Station Operation Services',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StaService',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Station Service',
                'verbose_name_plural': 'Station Services',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StaStation',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('security', models.IntegerField(null=True, blank=True)),
                ('docking_cost_per_volume', models.FloatField(null=True, blank=True)),
                ('max_ship_volume_dockable', models.FloatField(null=True, blank=True)),
                ('office_rental_cost', models.IntegerField(null=True, blank=True)),
                ('name', models.CharField(max_length=100, blank=True)),
                ('x', models.FloatField(null=True, blank=True)),
                ('y', models.FloatField(null=True, blank=True)),
                ('z', models.FloatField(null=True, blank=True)),
                ('reprocessing_efficiency', models.FloatField(null=True, blank=True)),
                ('reprocessing_stations_take', models.FloatField(null=True, blank=True)),
                ('reprocessing_hangar_flag', models.IntegerField(null=True, blank=True)),
                ('constellation', models.ForeignKey(blank=True, to='eve_db.MapConstellation', null=True)),
                ('corporation', models.ForeignKey(blank=True, to='eve_db.CrpNPCCorporation', null=True)),
                ('operation', models.ForeignKey(blank=True, to='eve_db.StaOperation', null=True)),
                ('region', models.ForeignKey(blank=True, to='eve_db.MapRegion', null=True)),
                ('solar_system', models.ForeignKey(blank=True, to='eve_db.MapSolarSystem', null=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Station',
                'verbose_name_plural': 'Stations',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StaStationType',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('dock_entry_x', models.FloatField(null=True, blank=True)),
                ('dock_orientation_x', models.FloatField(null=True, blank=True)),
                ('dock_entry_y', models.FloatField(null=True, blank=True)),
                ('dock_orientation_y', models.FloatField(null=True, blank=True)),
                ('dock_entry_z', models.FloatField(null=True, blank=True)),
                ('dock_orientation_z', models.FloatField(null=True, blank=True)),
                ('office_slots', models.IntegerField(null=True, blank=True)),
                ('reprocessing_efficiency', models.FloatField(null=True, blank=True)),
                ('is_conquerable', models.BooleanField(default=False)),
                ('operation', models.ForeignKey(blank=True, to='eve_db.StaOperation', null=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Station Type',
                'verbose_name_plural': 'Station Types',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='WarCombatZone',
            fields=[
                ('id', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('description', models.TextField(blank=True)),
                ('center_system', models.ForeignKey(to='eve_db.MapSolarSystem')),
                ('faction', models.ForeignKey(to='eve_db.ChrFaction')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Combat Zone',
                'verbose_name_plural': 'Combat Zones',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='WarCombatZoneSystem',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('combat_zone', models.ForeignKey(blank=True, to='eve_db.WarCombatZone', max_length=255)),
                ('solar_system', models.ForeignKey(blank=True, to='eve_db.MapSolarSystem', max_length=255)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Combat Zone System',
                'verbose_name_plural': 'Combat Zone Systems',
            },
            bases=(caching.base.CachingMixin, models.Model),
        ),
        migrations.AddField(
            model_name='stastation',
            name='type',
            field=models.ForeignKey(blank=True, to='eve_db.StaStationType', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='staoperationservices',
            name='service',
            field=models.ForeignKey(to='eve_db.StaService'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='staoperationservices',
            unique_together=set([('operation', 'service')]),
        ),
        migrations.AddField(
            model_name='staoperation',
            name='amarr_station_type',
            field=models.ForeignKey(related_name=b'amarr_station_operation_set', blank=True, to='eve_db.StaStationType', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='staoperation',
            name='caldari_station_type',
            field=models.ForeignKey(related_name=b'caldari_station_operation_set', blank=True, to='eve_db.StaStationType', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='staoperation',
            name='gallente_station_type',
            field=models.ForeignKey(related_name=b'gallente_station_operation_set', blank=True, to='eve_db.StaStationType', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='staoperation',
            name='jove_station_type',
            field=models.ForeignKey(related_name=b'jove_station_operation_set', blank=True, to='eve_db.StaStationType', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='staoperation',
            name='minmatar_station_type',
            field=models.ForeignKey(related_name=b'minmatar_station_operation_set', blank=True, to='eve_db.StaStationType', null=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='raminstallationtypecontent',
            unique_together=set([('installation_type', 'assembly_line_type')]),
        ),
        migrations.AlterUniqueTogether(
            name='ramassemblylinetypedetailpergroup',
            unique_together=set([('assembly_line_type', 'group')]),
        ),
        migrations.AlterUniqueTogether(
            name='ramassemblylinetypedetailpercategory',
            unique_together=set([('assembly_line_type', 'category')]),
        ),
        migrations.AddField(
            model_name='ramassemblylinestations',
            name='assembly_line_type',
            field=models.ForeignKey(to='eve_db.RamAssemblyLineType'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='ramassemblylinestations',
            name='owner',
            field=models.ForeignKey(blank=True, to='eve_db.CrpNPCCorporation', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='ramassemblylinestations',
            name='region',
            field=models.ForeignKey(blank=True, to='eve_db.MapRegion', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='ramassemblylinestations',
            name='solar_system',
            field=models.ForeignKey(blank=True, to='eve_db.MapSolarSystem', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='ramassemblylinestations',
            name='station',
            field=models.ForeignKey(to='eve_db.StaStation'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='ramassemblylinestations',
            name='station_type',
            field=models.ForeignKey(blank=True, to='eve_db.StaStationType', null=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='ramassemblylinestations',
            unique_together=set([('station', 'assembly_line_type')]),
        ),
        migrations.AlterUniqueTogether(
            name='planetschematicstypemap',
            unique_together=set([('schematic', 'type')]),
        ),
        migrations.AlterUniqueTogether(
            name='planetschematicspinmap',
            unique_together=set([('schematic', 'type')]),
        ),
        migrations.AddField(
            model_name='planetschematic',
            name='pin_map',
            field=models.ManyToManyField(related_name=b'usable_schematics', through='eve_db.PlanetSchematicsPinMap', to='eve_db.InvType'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='planetschematic',
            name='type_map',
            field=models.ManyToManyField(related_name=b'used_with_schematic', through='eve_db.PlanetSchematicsTypeMap', to='eve_db.InvType'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='mapsolarsystemjump',
            unique_together=set([('from_solar_system', 'to_solar_system')]),
        ),
        migrations.AlterUniqueTogether(
            name='mapregionjump',
            unique_together=set([('from_region', 'to_region')]),
        ),
        migrations.AddField(
            model_name='maplandmark',
            name='solar_system',
            field=models.ForeignKey(blank=True, to='eve_db.MapSolarSystem', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mapjump',
            name='destination_gate',
            field=models.ForeignKey(related_name=b'stargate_jump_destination_set', to='eve_db.MapDenormalize'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mapdenormalize',
            name='constellation',
            field=models.ForeignKey(blank=True, to='eve_db.MapConstellation', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mapdenormalize',
            name='group',
            field=models.ForeignKey(blank=True, to='eve_db.InvGroup', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mapdenormalize',
            name='region',
            field=models.ForeignKey(blank=True, to='eve_db.MapRegion', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mapdenormalize',
            name='solar_system',
            field=models.ForeignKey(blank=True, to='eve_db.MapSolarSystem', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mapdenormalize',
            name='type',
            field=models.ForeignKey(blank=True, to='eve_db.InvType', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mapconstellationjump',
            name='from_region',
            field=models.ForeignKey(related_name=b'constellation_jumps_from_region_set', to='eve_db.MapRegion'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mapconstellationjump',
            name='to_constellation',
            field=models.ForeignKey(related_name=b'constellation_jumps_to_constellation_set', to='eve_db.MapConstellation'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mapconstellationjump',
            name='to_region',
            field=models.ForeignKey(related_name=b'constellation_jumps_to_region_set', to='eve_db.MapRegion'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='mapconstellationjump',
            unique_together=set([('from_constellation', 'to_constellation')]),
        ),
        migrations.AddField(
            model_name='mapconstellation',
            name='region',
            field=models.ForeignKey(blank=True, to='eve_db.MapRegion', null=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='invtypereaction',
            unique_together=set([('reaction_type', 'input', 'type')]),
        ),
        migrations.AlterUniqueTogether(
            name='invtypematerial',
            unique_together=set([('type', 'material_type')]),
        ),
        migrations.AddField(
            model_name='invtype',
            name='group',
            field=models.ForeignKey(blank=True, to='eve_db.InvGroup', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='invtype',
            name='market_group',
            field=models.ForeignKey(blank=True, to='eve_db.InvMarketGroup', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='invtype',
            name='race',
            field=models.ForeignKey(blank=True, to='eve_db.ChrRace', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='invposresource',
            name='control_tower_type',
            field=models.ForeignKey(related_name=b'tower_resource_set', to='eve_db.InvType'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='invposresource',
            name='faction',
            field=models.ForeignKey(blank=True, to='eve_db.ChrFaction', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='invposresource',
            name='purpose',
            field=models.ForeignKey(blank=True, to='eve_db.InvPOSResourcePurpose', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='invposresource',
            name='resource_type',
            field=models.ForeignKey(related_name=b'pos_resource_set', to='eve_db.InvType'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='invposresource',
            unique_together=set([('control_tower_type', 'resource_type')]),
        ),
        migrations.AddField(
            model_name='invmetatype',
            name='parent_type',
            field=models.ForeignKey(related_name=b'inventorymetatype_parent_type_set', to='eve_db.InvType'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='invitem',
            name='type',
            field=models.ForeignKey(to='eve_db.InvType'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='invcontrabandtype',
            name='type',
            field=models.ForeignKey(to='eve_db.InvType'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='invcontrabandtype',
            unique_together=set([('faction', 'type')]),
        ),
        migrations.AddField(
            model_name='dgmtypeeffect',
            name='type',
            field=models.ForeignKey(to='eve_db.InvType'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='dgmtypeeffect',
            unique_together=set([('type', 'effect')]),
        ),
        migrations.AddField(
            model_name='dgmtypeattribute',
            name='inventory_type',
            field=models.ForeignKey(to='eve_db.InvType'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='dgmtypeattribute',
            unique_together=set([('inventory_type', 'attribute')]),
        ),
        migrations.AddField(
            model_name='dgmattributetype',
            name='unit',
            field=models.ForeignKey(blank=True, to='eve_db.EveUnit', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='crpnpccorporationtrade',
            name='type',
            field=models.ForeignKey(blank=True, to='eve_db.InvType', null=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='crpnpccorporationtrade',
            unique_together=set([('corporation', 'type')]),
        ),
        migrations.AddField(
            model_name='crpnpccorporationresearchfield',
            name='skill',
            field=models.ForeignKey(blank=True, to='eve_db.InvType', null=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='crpnpccorporationresearchfield',
            unique_together=set([('skill', 'corporation')]),
        ),
        migrations.AddField(
            model_name='crpnpccorporationdivision',
            name='division',
            field=models.ForeignKey(to='eve_db.CrpNPCDivision'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='crpnpccorporationdivision',
            unique_together=set([('corporation', 'division')]),
        ),
        migrations.AddField(
            model_name='crpnpccorporation',
            name='solar_system',
            field=models.ForeignKey(blank=True, to='eve_db.MapSolarSystem', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='chrfaction',
            name='corporation',
            field=models.ForeignKey(related_name=b'faction_set', blank=True, to='eve_db.CrpNPCCorporation', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='chrfaction',
            name='solar_system',
            field=models.ForeignKey(related_name=b'faction_set', blank=True, to='eve_db.MapSolarSystem', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='chrbloodline',
            name='corporation',
            field=models.ForeignKey(blank=True, to='eve_db.CrpNPCCorporation', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='chrbloodline',
            name='race',
            field=models.ForeignKey(related_name=b'bloodline_set', blank=True, to='eve_db.ChrRace', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='chrbloodline',
            name='starter_ship_type',
            field=models.ForeignKey(related_name=b'bloodline_starter_ship_set', blank=True, to='eve_db.InvType', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='chrancestry',
            name='bloodline',
            field=models.ForeignKey(blank=True, to='eve_db.ChrBloodline', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='agtresearchagent',
            name='type',
            field=models.ForeignKey(to='eve_db.InvType'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='agtresearchagent',
            unique_together=set([('agent', 'type')]),
        ),
        migrations.AddField(
            model_name='agtagent',
            name='corporation',
            field=models.ForeignKey(blank=True, to='eve_db.CrpNPCCorporation', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='agtagent',
            name='division',
            field=models.ForeignKey(blank=True, to='eve_db.CrpNPCDivision', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='agtagent',
            name='location',
            field=models.ForeignKey(blank=True, to='eve_db.MapDenormalize', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='agtagent',
            name='type',
            field=models.ForeignKey(blank=True, to='eve_db.AgtAgentType', null=True),
            preserve_default=True,
        ),
    ]
